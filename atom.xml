<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liutianci99.github.io/</id>
    <title>Stewart&apos;s Home</title>
    <updated>2024-11-05T08:27:06.707Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liutianci99.github.io/"/>
    <link rel="self" href="https://liutianci99.github.io/atom.xml"/>
    <subtitle>code, write and think</subtitle>
    <logo>https://liutianci99.github.io/images/avatar.png</logo>
    <icon>https://liutianci99.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Stewart&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[反转字符串]]></title>
        <id>https://liutianci99.github.io/post/fan-zhuan-zi-fu-chuan/</id>
        <link href="https://liutianci99.github.io/post/fan-zhuan-zi-fu-chuan/">
        </link>
        <updated>2024-11-05T08:25:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 541：</p>
<p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p>
<ul>
<li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li>
<li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li>
</ul>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>for循环+库函数</p>
<pre><code class="language-cpp">class Solution {
public:
    string reverseStr(string s, int k) {
        for (int i = 0; i &lt; s.size(); i += 2 * k) {
            if (s.size() - (i + 1) &lt; k) {
                reverse(s.begin() + i, s.end());
            } else {
                reverse(s.begin() + i, s.begin() + i + k);
            }
        }
        return s;
    }
};
</code></pre>
</li>
<li>
<p>for循环+自定义翻转函数</p>
<pre><code class="language-cpp">class Solution {
public:
    void my_reverse(string&amp; s, int start, int end) {
        while (start &lt; end) {
            int tmp = s[start];
            s[start] = s[end];
            s[end] = tmp;
            start ++;
            end --;
        }
    }
    string reverseStr(string s, int k) {
        for (int i = 0; i &lt; s.size(); i += 2 * k) {
            if (s.size() - (i + 1) &lt; k) {
                my_reverse(s, i, s.size() - 1);
            } else {
                my_reverse(s, i, i + k - 1);
            }
        }
        return s;
    }
};
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设计链表]]></title>
        <id>https://liutianci99.github.io/post/she-ji-lian-biao/</id>
        <link href="https://liutianci99.github.io/post/she-ji-lian-biao/">
        </link>
        <updated>2024-11-05T01:20:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 707：</p>
<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>
<p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。</p>
<p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p>
<p>实现 <code>MyLinkedList</code> 类：</p>
<ul>
<li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li>
<li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li>
<li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>
<li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li>
<li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>
<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li>
</ul>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>单链表</p>
<pre><code class="language-cpp">class MyLinkedList {
    struct Linkedlist {
        int val;
        Linkedlist* next;
        Linkedlist(int val) : val(val), next(nullptr) {}
    };

public:
    MyLinkedList() {
        dummy_head = new Linkedlist(0);
        length = 0;
    }

    int get(int index) {
        if (index &lt; 0 || index &gt;= length) {
            return -1;
        }
        Linkedlist* curr = dummy_head-&gt;next;
        while (index--) {
            curr = curr-&gt;next;
        }
        return curr-&gt;val;
    }

    void addAtHead(int val) {
        Linkedlist* new_node = new Linkedlist(val);
        Linkedlist* curr = dummy_head-&gt;next;
        dummy_head-&gt;next = new_node;
        new_node-&gt;next = curr;
        length++;
    }

    void addAtTail(int val) {
        Linkedlist* curr = dummy_head;
        while (curr-&gt;next != nullptr) {
            curr = curr-&gt;next;
        }
        Linkedlist* new_node = new Linkedlist(val);
        curr-&gt;next = new_node;
        length++;
    }

    void addAtIndex(int index, int val) {
        if (index &lt; 0 || index &gt; length) {
            return;
        }
        if (index == length) {
            addAtTail(val);
            return;
        }
        Linkedlist* curr = dummy_head;
        while (index--) {
            curr = curr-&gt;next;
        }
        Linkedlist* tmp = curr-&gt;next;
        Linkedlist* new_node = new Linkedlist(val);
        curr-&gt;next = new_node;
        new_node-&gt;next = tmp;
        length++;
    }

    void deleteAtIndex(int index) {
        if (index &lt; 0 || index &gt;= length) {
            return;
        }
        Linkedlist* curr = dummy_head;
        while (index--) {
            curr = curr-&gt;next;
        }
        Linkedlist* node_to_delete = curr-&gt;next;
        curr-&gt;next = curr-&gt;next-&gt;next;
        delete node_to_delete;  // Properly delete the node to avoid memory leaks
        length--;
    }

private:
    int length;
    Linkedlist* dummy_head;
};
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[有序数组的平方]]></title>
        <id>https://liutianci99.github.io/post/you-xu-shu-zu-de-ping-fang/</id>
        <link href="https://liutianci99.github.io/post/you-xu-shu-zu-de-ping-fang/">
        </link>
        <updated>2024-11-05T01:19:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 974：</p>
<p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>库函数（平方+排序）</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;

int main()
{
    vector&lt;int&gt; vec = {-4,-1,0,3,10};
    vector&lt;int&gt; result;
    for(int i:vec)
    {
        result.push_back(i * i);
    }
    sort(result.begin(), result.end());
    for(int i:result)
    {
        cout &lt;&lt; i &lt;&lt; &quot; &quot;;
    }
}
</code></pre>
<p>创建新的向量，先把原数组平方后的数填入，再排序。</p>
</li>
<li>
<p>双指针</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;

int main()
{
    vector&lt;int&gt; vec = {-4,-1,0,3,10};
    int length = vec.size() - 1;
    vector&lt;int&gt; result(length+1);
    for(int i=0, j = vec.size()-1; i &lt;= j;)
    {
        if(vec[i]*vec[i] &lt;= vec[j]*vec[j])
        {
            result[length] = vec[j] * vec[j];
            length --;
            j --;
        }
        else
        {
            result[length] = vec[i]*vec[i];
            length --;
            i ++;
        }
    }
    for(int i=0; i &lt; result.size(); i++)
    {
        cout &lt;&lt; result[i] &lt;&lt; &quot; &quot;;
    }
}
</code></pre>
<p>类似归并排序。由于原数组是有序的，所以可以按倒序，每次在原数组的两端选取最大值填入新数组。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[长度最小的子数组]]></title>
        <id>https://liutianci99.github.io/post/chang-du-zui-xiao-de-zi-shu-zu/</id>
        <link href="https://liutianci99.github.io/post/chang-du-zui-xiao-de-zi-shu-zu/">
        </link>
        <updated>2024-11-05T01:19:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 209:</p>
<p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p>
<p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>子数组</strong>[numsl, numsl+1, ..., numsr-1, numsr]<code>，并返回其长度**。**如果不存在符合条件的子数组，返回</code>0` 。</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>暴力（双层for循环）</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;

int main()
{
    vector&lt;int&gt; nums = {1,4,4};
    int target = 4;
    int left = 0;
    int result = nums.size() + 1;
    int length = 0;
    for(int right = 0; left &lt; nums.size(); left ++)
    {
        int sum = 0;
        for(right = left; right &lt; nums.size(); right ++)
        {
            sum += nums[right];
            if(sum &gt;= target)
            {
                length = right - left + 1;
                result = result &gt; length ? length : result;
                break;
            }
        }
    }
    if(result == nums.size() + 1)
    {
        return 0;
    }
    else
    {
        return result;
    }
}
</code></pre>
<p>通过设置子数组的左、右边界来从小到大遍历所有子数组，如果有满足条件的数组则输出数组长度。但是在leetcode会超时。</p>
</li>
<li>
<p>滑动窗口</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;

int main()
{
    vector&lt;int&gt; nums = {1,4,4};
    int target = 4;
    int sum = 0;
    int left = 0;
    int length;
    int result = nums.size() + 1;
    for(int right = 0;right &lt; nums.size(); right ++)
    {
        sum += nums[right];
        while(sum &gt;= target)
        {
            length = right - left + 1;
            result = result &lt; length ? result : length;
            sum -= nums[left];
            left ++;
        }
    }
    result = (result == (nums.size()+1)) ? 0 : result;
    return result;
}
</code></pre>
<p>先固定左边界，再通过移动右边界得到一个满足条件的子数组，在这个子数组内通过移动左边界得到最小长度的子数组。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[螺旋数组]]></title>
        <id>https://liutianci99.github.io/post/luo-xuan-shu-zu/</id>
        <link href="https://liutianci99.github.io/post/luo-xuan-shu-zu/">
        </link>
        <updated>2024-11-05T00:47:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 59：</p>
<p>Given a positive integer <code>n</code>, generate an <code>n x n</code> <code>matrix</code> filled with elements from <code>1</code> to <code>n2</code> in spiral order</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>循环模拟（注意边界值）</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
#include&lt;vector&gt;
using namespace std;

int main()
{
    int n;
    cin &gt;&gt; n;
    vector&lt;vector&lt;int&gt;&gt; matrix(n, vector&lt;int&gt;(n));
    int loop = n / 2;
    int i, j;
    int start_i = 0, start_j = 0;
    int offset = 1;
    int number = 1;
    while(loop --)
    {
        i = start_i;
        j = start_j;
        // 循环是左闭右开的区间
        for(;j &lt; n -offset; j++)
        {
            matrix[i][j] = number;
            number ++;
        }
        for(;i &lt; n - offset; i ++)
        {
            matrix[i][j] = number;
            number ++;
        }
        for(;j &gt; start_j; j--)
        {
            matrix[i][j] = number;
            number ++;
        }
        for(;i &gt; start_i; i--)
        {
            matrix[i][j] = number;
            number ++;
        }
        offset ++;
        start_j ++;
        start_i ++;
    }
    if(n % 2 == 1)
    {
        matrix[n/2][n/2] = n * n;
    }
    for(i = 0; i &lt; n; i++)
    {
        for(j = 0; j &lt; n; j++)
        {
            cout &lt;&lt; matrix[i][j] &lt;&lt; &quot; &quot;;
        }
        cout &lt;&lt; &quot;\n&quot;;
    }
}
</code></pre>
<p>先生成矩阵然后往矩阵里填入数。根据不同的n确定需要螺旋几圈。把每一圈分为左闭右开的四次循环，注意每圈的边界值都不一样。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[四数之和]]></title>
        <id>https://liutianci99.github.io/post/si-shu-zhi-he/</id>
        <link href="https://liutianci99.github.io/post/si-shu-zhi-he/">
        </link>
        <updated>2024-11-04T00:48:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 18：</p>
<p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p>
<ul>
<li><code>0 &lt;= a, b, c, d &lt; n</code></li>
<li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li>
<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>
</ul>
<p>你可以按 <strong>任意顺序</strong> 返回答案 。</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>双指针</p>
<pre><code class="language-cpp">class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {
        sort(nums.begin(), nums.end());
        vector&lt;vector&lt;int&gt;&gt; result;
        for (int i = 0; i &lt; nums.size(); i ++) {
            if (nums[i] &gt; 0 &amp;&amp; nums[i] &gt; target) break;
            if (i &gt; 0 &amp;&amp; nums[i - 1] == nums[i]) continue;
            for (int j = i + 1; j &lt; nums.size(); j ++) {
                if (nums[j] + nums[i] &gt; 0 &amp;&amp; nums[j] + nums[i] &gt; target) break;
                if (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;
                int left = j + 1;
                int right = nums.size() - 1;
                while (left &lt; right) {
                    if ((long)nums[i] + nums[j] + nums[left] + nums[right] &gt; target) {
                        right --;
                    } else if ((long)nums[i] + nums[j] + nums[left] + nums[right] &lt; target) {
                        left ++;
                    } else {
                        result.push_back(vector&lt;int&gt;{nums[i], nums[j], nums[left], nums[right]});
                        while (left &lt; right &amp;&amp; nums[left] == nums[left + 1]) left ++;
                        while (left &lt; right &amp;&amp; nums[right] == nums[right -1]) right --;
                        left ++;
                        right --;
                    }
                }
            }
        }
        return result;
    }
};
</code></pre>
<p>和三数之和差不多，关键在于剪枝、去重。以及四数相加可能造成溢出，加上long变成长整型。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[三数之和]]></title>
        <id>https://liutianci99.github.io/post/san-shu-zhi-he/</id>
        <link href="https://liutianci99.github.io/post/san-shu-zhi-he/">
        </link>
        <updated>2024-11-03T00:48:37.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<!-- more -->
<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode ：</p>
<p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请你返回所有和为 <code>0</code> 且不重复的三元组。</p>
<p>**注意：**答案中不可以包含重复的三元组。</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>哈希表（去重麻烦）</p>
<pre><code class="language-cpp">
</code></pre>
</li>
<li>
<p>双指针</p>
<pre><code class="language-cpp">class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {
        vector&lt;vector&lt;int&gt;&gt; result;
        sort(nums.begin(), nums.end());
        for (int i = 0; i &lt; nums.size() - 2; i ++) {
            if (nums[i] &gt; 0) return result;
            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) {
                continue;
            }
            int left = i + 1;
            int right = nums.size() - 1;
            while (left &lt; right) {
                if (nums[i] + nums[left] + nums[right] &gt; 0) {
                    right --;
                } else if (nums[i] + nums[left] + nums[right] &lt; 0) {
                    left ++;
                } else {
                    result.push_back(vector&lt;int&gt;{nums[i], nums[left], nums[right]});
                    while (left &lt; right &amp;&amp; nums[left] == nums[left + 1]) left ++;
                    while (left &lt; right &amp;&amp; nums[right] == nums[right - 1]) right --;
                    left ++;
                    right --;
                }
            }
        }
        return result;
    }
};
</code></pre>
<p>重点在于先排序再去重。遍历数组，通过遍历的数i确定left，right。确定i，left，right的同时对三者进行去重。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[相交链表]]></title>
        <id>https://liutianci99.github.io/post/xiang-jiao-lian-biao/</id>
        <link href="https://liutianci99.github.io/post/xiang-jiao-lian-biao/">
        </link>
        <updated>2024-10-27T13:57:29.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 面试题02.07：</p>
<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p>
<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>
<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>暴力循环</p>
<pre><code class="language-cpp">class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA == nullptr || headB == nullptr) {
            return NULL;
        }
        ListNode* currA;
        ListNode* currB;
        currA = headA;
        currB = headB;
        while (currA != nullptr) {
            if (currB == nullptr) {
                currB = headB;
            }
            while (currB != nullptr) {
                if (currA == currB) {
                    return currA;
                } else {
                    currB = currB-&gt;next;
                }
            }
            currA = currA-&gt;next;
        }
        return NULL;
    }
};
</code></pre>
<p>对于A中的每一个节点，循环B中的节点，判断二者是否相等。注意，需要遍历完B时，及时转到B的头节点。</p>
</li>
<li>
<p>双指针交替</p>
<pre><code class="language-cpp">class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA == nullptr || headB == nullptr) {
            return NULL;
        }
        ListNode* currA = headA;
        ListNode* currB = headB;
        while (currA != currB) {
            currA = (currA == nullptr) ? headB : currA-&gt;next;
            currB = (currB == nullptr) ? headA : currB-&gt;next;
        }
        return currA;
    }  
};
</code></pre>
<p>即便A、B不相等，但是在第一轮遍历后交换位置，因为两个指针所走的路程相同，交换位置后，如果找到相交节点就返回相交节点，如果没有相交节点两者会走过A+B个节点后同时到达空指针。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[删除链表倒数第N个节点]]></title>
        <id>https://liutianci99.github.io/post/shan-chu-lian-biao-dao-shu-di-n-ge-jie-dian/</id>
        <link href="https://liutianci99.github.io/post/shan-chu-lian-biao-dao-shu-di-n-ge-jie-dian/">
        </link>
        <updated>2024-10-27T04:20:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<blockquote>
<p>Leetcode 26:</p>
<p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
</blockquote>
<h2 id="题解">题解</h2>
<ul>
<li>
<p>转化为删除第N个节点</p>
<pre><code class="language-cpp">class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int length = 0;
        ListNode* curr;
        ListNode* dummy = new ListNode();
        dummy-&gt;next = head;
        curr = head;
        while(curr != nullptr) {
            curr = curr-&gt;next;
            length ++;
        }
        int right_pos = length - n;
        curr = dummy;
        while(right_pos --) {
            curr = curr-&gt;next;
        }
        curr-&gt;next = curr-&gt;next-&gt;next;
        return dummy-&gt;next;
    }
};
</code></pre>
<p>通过循环得到链表的长度，将倒数的问题转化为正数的问题。通过增加虚拟头节点统一节点操作，正常写删除节点的代码即可。</p>
</li>
</ul>
]]></content>
    </entry>
</feed>